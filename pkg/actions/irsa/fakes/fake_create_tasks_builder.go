// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/weaveworks/eksctl/pkg/actions/irsa"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/utils/tasks"
)

type FakeCreateTasksBuilder struct {
	CreateIAMServiceAccountsTasksStub        func(context.Context, []*v1alpha5.ClusterIAMServiceAccount) *tasks.TaskTree
	createIAMServiceAccountsTasksMutex       sync.RWMutex
	createIAMServiceAccountsTasksArgsForCall []struct {
		arg1 context.Context
		arg2 []*v1alpha5.ClusterIAMServiceAccount
	}
	createIAMServiceAccountsTasksReturns struct {
		result1 *tasks.TaskTree
	}
	createIAMServiceAccountsTasksReturnsOnCall map[int]struct {
		result1 *tasks.TaskTree
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateTasksBuilder) CreateIAMServiceAccountsTasks(arg1 context.Context, arg2 []*v1alpha5.ClusterIAMServiceAccount) *tasks.TaskTree {
	var arg2Copy []*v1alpha5.ClusterIAMServiceAccount
	if arg2 != nil {
		arg2Copy = make([]*v1alpha5.ClusterIAMServiceAccount, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createIAMServiceAccountsTasksMutex.Lock()
	ret, specificReturn := fake.createIAMServiceAccountsTasksReturnsOnCall[len(fake.createIAMServiceAccountsTasksArgsForCall)]
	fake.createIAMServiceAccountsTasksArgsForCall = append(fake.createIAMServiceAccountsTasksArgsForCall, struct {
		arg1 context.Context
		arg2 []*v1alpha5.ClusterIAMServiceAccount
	}{arg1, arg2Copy})
	stub := fake.CreateIAMServiceAccountsTasksStub
	fakeReturns := fake.createIAMServiceAccountsTasksReturns
	fake.recordInvocation("CreateIAMServiceAccountsTasks", []interface{}{arg1, arg2Copy})
	fake.createIAMServiceAccountsTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCreateTasksBuilder) CreateIAMServiceAccountsTasksCallCount() int {
	fake.createIAMServiceAccountsTasksMutex.RLock()
	defer fake.createIAMServiceAccountsTasksMutex.RUnlock()
	return len(fake.createIAMServiceAccountsTasksArgsForCall)
}

func (fake *FakeCreateTasksBuilder) CreateIAMServiceAccountsTasksCalls(stub func(context.Context, []*v1alpha5.ClusterIAMServiceAccount) *tasks.TaskTree) {
	fake.createIAMServiceAccountsTasksMutex.Lock()
	defer fake.createIAMServiceAccountsTasksMutex.Unlock()
	fake.CreateIAMServiceAccountsTasksStub = stub
}

func (fake *FakeCreateTasksBuilder) CreateIAMServiceAccountsTasksArgsForCall(i int) (context.Context, []*v1alpha5.ClusterIAMServiceAccount) {
	fake.createIAMServiceAccountsTasksMutex.RLock()
	defer fake.createIAMServiceAccountsTasksMutex.RUnlock()
	argsForCall := fake.createIAMServiceAccountsTasksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCreateTasksBuilder) CreateIAMServiceAccountsTasksReturns(result1 *tasks.TaskTree) {
	fake.createIAMServiceAccountsTasksMutex.Lock()
	defer fake.createIAMServiceAccountsTasksMutex.Unlock()
	fake.CreateIAMServiceAccountsTasksStub = nil
	fake.createIAMServiceAccountsTasksReturns = struct {
		result1 *tasks.TaskTree
	}{result1}
}

func (fake *FakeCreateTasksBuilder) CreateIAMServiceAccountsTasksReturnsOnCall(i int, result1 *tasks.TaskTree) {
	fake.createIAMServiceAccountsTasksMutex.Lock()
	defer fake.createIAMServiceAccountsTasksMutex.Unlock()
	fake.CreateIAMServiceAccountsTasksStub = nil
	if fake.createIAMServiceAccountsTasksReturnsOnCall == nil {
		fake.createIAMServiceAccountsTasksReturnsOnCall = make(map[int]struct {
			result1 *tasks.TaskTree
		})
	}
	fake.createIAMServiceAccountsTasksReturnsOnCall[i] = struct {
		result1 *tasks.TaskTree
	}{result1}
}

func (fake *FakeCreateTasksBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createIAMServiceAccountsTasksMutex.RLock()
	defer fake.createIAMServiceAccountsTasksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateTasksBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ irsa.CreateTasksBuilder = new(FakeCreateTasksBuilder)
